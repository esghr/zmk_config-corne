/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    
    behaviors {
        hml: homerow_mods_layers {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &hm LCTRL A &hm LGUI S &hm LALT D &hm LSHIFT F
            >;
        };
    };
};

/*
#define de_GRAVE PLUS 
#define de_DQT AT
#define de_4 N4 
#define de_ue LBKT
#define de_PLUS RBKT
#define de_8 N8
#define de_EQUAL RPAR
#define de_LPAR STAR
#define de_STAR RBRC
#define de_HASH BSLH
#define de_SLASH AMPS
#define de_RPAR LPAR
#define de_QMARK UNDER
#define de_oe COLON
#define de_MINUS SLASH
#define de_PARA HASH
#define de_SQT PIPE
#define de_DEGREE TILDE
#define de_ue LBRC
#define de_STAR RBRC
#define de_UNDER QMARK
#define de_ae DQT
#define de_oe SEMI
#define de_CARET GRAVE
#define de_SEMICOLON LT
#define de_COLON GT
*/

// Aliases
#define DE_CIRC GRAVE  // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL  // ´ (dead)
#define DE_UE 	LBKT // Ü
#define DE_PLUS RBRC // +
#define DE_OE 	SEMI // Ö
#define DE_AE 	SQT // Ä
#define DE_HASH NUHS // #
#define DE_LABK NUBS // <
#define DE_MINS SLASH // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(N1)    // !
#define DE_DQUO LS(N2)    // "
#define DE_SECT LS(N3)    // §
#define DE_DLR  LS(N4)    // $
#define DE_PERC LS(N5)    // %
#define DE_AMPR LS(N6)    // &
#define DE_SLSH LS(N7)    // /
#define DE_LPRN LS(N8)    // (
#define DE_RPRN LS(N9)    // )
#define DE_EQL  LS(N0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(DE_PLUS) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(COMM) // ;
#define DE_COLN LS(DOT)  // :
#define DE_UNDS LS(DE_MINS) // _
#define DE_SUP2 RALT(N2)    // ²
#define DE_SUP3 RALT(N3)    // ³
#define DE_LCBR RALT(N7)    // {
#define DE_LBRC RALT(N8)    // [
#define DE_RBRC RALT(N9)    // ]
#define DE_RCBR RALT(N0)    // }
#define DE_BSLS RALT(SS)   // (backslash)
#define DE_AT   RALT(Q)    // @
#define DE_EURO RALT(E)    // €
#define DE_TILD RALT(PLUS) // ~
#define DE_PIPE RALT(LABK) // |
#define DE_MICR RALT(M)    // µ


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Z  |  Y  |  U  |  A  |  Q  |   |  P  |  B   |  M  |  L  |  F  |  ẞ   |
// |  GUI |  C  |  S  |  I  |  E  |  O  |   |  D  |  T   |  N  |  R  |  H  |  J   |
// |  ALT |  V  |  X  |  Ü  |  Ä  |  Ö  |   |  W  |  G   |  ,  |  .  |  K  | RAL  |
//                    | CTRL| LWR | SPC |   | SHFT| BSPC | ENT |
                        bindings = <
   &hm ESC TAB  &kp Z &kp Y &kp U &kp A &kp Q      &kp P &kp B  &kp M  &kp L   &kp F &kp DE_SS
   &kp LGUI &hml 2 C &hml 1 S &hm RALT I &hm LCTL E &kp O      &hm LCTL D &hm RALT T  &hml 1 N  &hml 2 R   &kp H &kp J
   &kp LALT &kp V &kp X &kp LBKT &kp SQT &kp SEMI   &kp W &kp G  &kp COMMA &kp DOT &kp J &mo 1
                  &kp LCTRL &mo 2 &kp SPACE    &kp LSHFT &kp BSPC &kp RET
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  `   |  &  |  @  | UP  | EURO|  [  |   |  ]  |  !  |  §  |  =  |  *  |  +   |
// |  \   |  /  | LFT | DWN | RGT |  (  |   |  )  |  ?  |  "  |  '  |  -  |      |
// |      |  #  |  |  |  ~  |  %  |  {  |   |  }  |  _  |  ;  |  :  |  °  |  ^   |
//                    |     |     |  <  |   |  >  | RALT|     |
                        bindings = <
   &kp PLUS   &kp LS(N6)  &kp RA(Q)   &kp C_MENU_UP   &kp RA(E)  &kp RA(N8) &kp RA(N9) &kp EXCL  &kp HASH   &kp RPAR &kp RBRC  &kp RBKT 
   &kp RA(MINUS)    &kp AMPS    &kp C_MENU_LEFT &kp C_MENU_DOWN &kp C_MENU_RIGHT &kp STAR  &kp LPAR &kp UNDER &kp DE_DQUO   &kp DE_QUOT &kp DE_MINS &kp LS(N4)
   &kp LCTRL   &kp BSLH &kp RA(NUBS)  &kp RA(RBRC) &kp PRCNT &kp LA(N7) &kp LA(N0) &kp QMARK &kp DE_SCLN  &kp DE_COLN   &kp DE_DEG  &kp GRAVE
                                           &trans          &trans           &trans           &trans   &kp RALT  &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  xi  | xi  | psi |labda| chi | tau |   |kappa|  7  |  8  |  9  |gamma|omega |
// | phi  |upsln| iota|alpha| epsi|omcrn|   | nu  |  4  |  5  |  6  |delta|sigma |
// |theta | rho | tau | eta |  pi |zeta |   | beta|  1  |  2  |  3  | mu  |      |
//                    |     |     |     |   |     |     |  0  |
                        bindings = <
   &kp ESC  &trans  &trans  &trans  &trans  &trans     &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
   &kp TAB  &trans  &trans  &trans  &trans  &trans     &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
   &trans   &trans  &trans  &trans  &trans  &trans     &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                           &trans  &trans  &trans     &trans  &kp N0  &trans
                        >;
                };
        };
};
