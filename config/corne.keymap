/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        mo_tog: mo_tog_tabdance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&tog 1>;
        };
    };
};

// Aliases 
#define DE_CIRC GRAVE  // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT PLUS  // ´ (dead)
#define DE_UE 	LBKT // Ü
#define DE_PLUS RBRC // +
#define DE_OE 	SEMI // Ö
#define DE_AE 	SQT // Ä
#define DE_HASH NUHS // #
#define DE_LABK NUBS // <
#define DE_MINS SLASH // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(N1)    // !
#define DE_DQUO LS(N2)    // "
#define DE_SECT LS(N3)    // §
#define DE_DLR  LS(N4)    // $
#define DE_PERC LS(N5)    // %
#define DE_AMPR LS(N6)    // &
#define DE_SLSH LS(N7)    // /
#define DE_LPRN LS(N8)    // (
#define DE_RPRN LS(N9)    // )
#define DE_EQL  LS(N0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(RBRC) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(COMMA) // ;
#define DE_COLN LS(DOT)  // :
#define DE_UNDS LS(DE_MINS) // _
#define DE_SUP2 RA(N2)    // ²
#define DE_SUP3 RA(N3)    // ³
#define DE_LCBR RA(N7)    // {
#define DE_LBRC RA(N8)    // [
#define DE_RBRC RA(N9)    // ]
#define DE_RCBR RA(N0)    // }
#define DE_BSLS RA(DE_SS)   // (backslash)
#define DE_AT   RA(Q)    // @
#define DE_EURO RA(E)    // €
#define DE_TILD RA(DE_PLUS) // ~
#define DE_PIPE RA(DE_LABK) // |
#define DE_MICR RA(M)    // µ

// SHFT: ()
// ALT: []
// Taste gedrückt halten: {}

// zum Anfang der Zeile springen: lL (lineLeft)
// zum Ende der Zeile springen: lR (lineRight)
// vor ein Wort springen: lW (left(of)Word)
// hinter ein Wort springen: rW (right(of)Word)
// zum Anfang der Seite springen: pU (pageUp)
// zum Ende der Seite springen: pD (pageDown)
// Idee: Hold SPC ist auf Layer 1
/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |ESC TAB|  Y  |  J   |  U  |  A  |  Q  |   |  P  |  B  |  M  |  L  |  F  | BSPC|
// |   Z   |  C  |  S   |  I  |  E  |  O  |   |  D  |  T  |  N  |  R  |  H  |  ß  |
// |  LGUI |  V  |  X   |  Ü  |  Ä  |  Ö  |   |  W  |  G  |  ,  |  .  |  K  |  !  |
//              |BSPC RALT|TAB LCTRL| SPC |   |SHFT |tog1 | RET RALT |

                        bindings = <
   &mt TAB ESC &kp Z &kp J &kp U    &kp A   &kp Q       &kp P     &kp B &kp M      &kp L    &kp F &kp BSPC
   &kp Y       &kp C &kp S &kp I    &kp E   &kp O       &kp D     &kp T &kp N      &kp R    &kp H &kp MINUS 
   &kp LGUI    &kp V &kp X &kp LBKT &kp SQT &kp SEMI    &kp W     &kp G &kp COMMA  &kp DOT  &kp K &mt RALT LS(N1)
                &mt RALT BSPC &mt LCTRL TAB &kp SPACE   &kp LSHFT &mo_tog &mt TAB RET
                        >;
                };
                num_F_nav_layer {
// -----------------------------------------------------------------------------------------
// | ESC TAB |   1 F1  |  2 F2  |  3 F3  | 4 F4 | 5 F5 |   | 6 F6 | 7 F7 |   8 F8  |  9 F9  |  0 F10 | BSPC F12 |
// |  NUHS   |LS(SLASH)| SLASH  |LS(NUHS)|LS(N2)|      |   |      | LFT  |    UP   |  DWN   |  RGT   | ! F11 |
// |  LGUI   |  GRAVE  | TILDE2 |NUBS F11|RBKT  | RBRC |   |      | HOME |  PG_UP  | PG_DN  |  END   |RSHFT|
//                             |BSPC LCTRL|TAB RALT|SPC|   | SHFT |tog1  |RET RALT |
                        bindings = <
   &mt TAB ESC &mt F1 N1     &mt F2 N2  &mt F3 N3    &mt F4 N4  &mt F5 N5    &mt F6 N6 &mt F7 N7 &mt F8 N8 &mt F9 N9 &kp N0    &kp BSPC 
   &kp NUHS    &kp LS(SLASH) &kp SLASH  &kp LS(NUHS) &kp LS(N2) &trans       &trans    &kp LEFT  &kp UP    &kp DOWN  &kp RIGHT &mt F11 LS(N1) 
   &kp LGUI    &mt F10 GRAVE &kp TILDE2 &mt F11 NUBS &kp RBKT   &kp RBRC     &trans    &kp HOME  &kp PG_UP &kp PG_DN &kp END   &kp RSHFT
                                    &mt LCTRL BSPC &mt RALT TAB &kp SPACE    &kp LSHFT &tog 1    &mt RALT RET
                        >;
                };
        };
};
