/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    
    behaviors {
        hml: homerow_mods_layers {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &hm LCTRL A &hm LGUI S &hm LALT D &hm LSHIFT F
            >;
        };
    };
};

/*
#define de_GRAVE PLUS 
#define de_DQT AT
#define de_4 N4 
#define de_ue LBKT
#define de_PLUS RBKT
#define de_8 N8
#define de_EQUAL RPAR
#define de_LPAR STAR
#define de_STAR RBRC
#define de_HASH BSLH
#define de_SLASH AMPS
#define de_RPAR LPAR
#define de_QMARK UNDER
#define de_oe COLON
#define de_MINUS SLASH
#define de_PARA HASH
#define de_SQT PIPE
#define de_DEGREE TILDE
#define de_ue LBRC
#define de_STAR RBRC
#define de_UNDER QMARK
#define de_ae DQT
#define de_oe SEMI
#define de_CARET GRAVE
#define de_SEMICOLON LT
#define de_COLON GT
*/

// Aliases
#define DE_CIRC GRAVE  // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT PLUS  // ´ (dead)
#define DE_UE 	LBKT // Ü
#define DE_PLUS RBRC // +
#define DE_OE 	SEMI // Ö
#define DE_AE 	SQT // Ä
#define DE_HASH NUHS // #
#define DE_LABK NUBS // <
#define DE_MINS SLASH // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(N1)    // !
#define DE_DQUO LS(N2)    // "
#define DE_SECT LS(N3)    // §
#define DE_DLR  LS(N4)    // $
#define DE_PERC LS(N5)    // %
#define DE_AMPR LS(N6)    // &
#define DE_SLSH LS(N7)    // /
#define DE_LPRN LS(N8)    // (
#define DE_RPRN LS(N9)    // )
#define DE_EQL  LS(N0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(DE_PLUS) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(COMMA) // ;
#define DE_COLN LS(DOT)  // :
#define DE_UNDS LS(DE_MINS) // _
#define DE_SUP2 RA(N2)    // ²
#define DE_SUP3 RA(N3)    // ³
#define DE_LCBR RA(N7)    // {
#define DE_LBRC RA(N8)    // [
#define DE_RBRC RA(N9)    // ]
#define DE_RCBR RA(N0)    // }
#define DE_BSLS RA(DE_SS)   // (backslash)
#define DE_AT   RA(Q)    // @
#define DE_EURO RA(E)    // €
#define DE_TILD RA(DE_PLUS) // ~
#define DE_PIPE RA(DE_LABK) // |
#define DE_MICR RA(M)    // µ


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |            |  Z (ESC)  |  Y (TAB)  |     U     |     A    |    Q    |     |    P    |    B     |    M    |    L    |    F    |       |
// |            |  C (RSL)  |  S (LWR)  |  I (RALT) | E (LCTRL)|    O    |     |    D    | T (RCTRL)| N (RALT)| R (LWR) | H (RSL) |       |
// |            |     V     |     X     |     J     |     Ä    |    Ö    |     |    W    |    G     |    ,    |    .    |    K    |       |
//                                      |    RET    |     Ü    |   SPC   |     |   SHFT  |    ß     |  BSPC   |
                        bindings = <
   &trans &hm ESC Z &hm TAB Y &kp U &kp A &kp Q      &kp P &kp B  &kp M  &kp L   &kp F &trans
   &trans &hml 2 C &hml 1 S &hm RALT I &hm LCTRL E &kp O      &kp D &hm RCTRL T  &hml RALT N  &hml 1 R   &hml 2 H &trans
   &trans &hm LGUI V &kp X &kp J &kp SQT &kp SEMI   &kp W &kp G  &kp COMMA &kp DOT &kp K &trans
                  &kp RET &kp LBKT &kp SPACE    &kp LSHFT &kp DE_SS &kp BSPC
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |LFTline|DWNpage|UPpage|RGTline|[ (])|   |  @  |  7  |  8  |  9  | mu |    |
// |     |LFT(word)| DWN | UP |RGT(word)|"(" (")")|   |? (!)|4(STRG)|  5  |  6  | " (') |    |
// |     |DLR (EURO)|"|"(°)|  %  |  #  |{ (})|   |_ (-)|  1  |  2  |  3  |/ (\)|    |
//                   |  *  |  =  |< (>)|   |  §  |  0  |  ^  |
                        bindings = <
   &trans &hm LC(HOME) HOME &kp PG_DN &kp PG_UP &hm LC(END) END &hm DE_RBRC DE_LBRC &kp RA(Q) &kp N7 &kp N8 &kp N9 &kp RA(M)  &trans  
   &trans &hm LC(C_MENU_LEFT) C_MENU_LEFT &kp C_MENU_DOWN &kp C_MENU_UP &hm LC(C_MENU_RIGHT) C_MENU_RIGHT &hm LS(N9) LS(N8) &hm LS(N1) LS(DE_SS) &hm LSHFT N4 &kp N5 &kp N6 &hm LS(DE_HASH) LS(N2) &trans 
   &trans &hm RA(E) LS(N4) &hm LS(DE_CIRC) RA(DE_LABK) &kp LS(N5) &kp NUHS &hm RA(N0) RA(N7) &hm LS(SLASH) SLASH &kp N1 &kp N2 &kp N3 &hm DE_BSLS LS(N7) &trans 
                                           &hm LS(RBRC) RBRC &kp LS(N0) &hm LS(N3) NUBS     &kp LS(N3) &kp N0 &kp GRAVE 
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  xi  | xi  |    |labda| chi | tau |   |kappa|    |    |    |gamma|omega |
// | phi  |HOME |LC(END)|LC(HOME)|END |omcrn|   | nu  |    |LC(LA(DWN))|LC(LA(UP))|    |    |
// |theta | rho | tau | eta |  pi |zeta |   | beta|    |    |    |   |    |
//                    |     |    |line lft|   |line lft|LSHFT|    |
                        bindings = <
   &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
   &trans  &kp HOME  &kp LC(END)  &kp LC(HOME)  &kp END  &trans     &trans  &trans  &kp LC(LA(C_MENU_DOWN))  &kp LC(LA(C_MENU_UP))  &trans  &trans
   &trans   &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &kp LC(C_MENU_LEFT)     &kp LC(C_MENU_RIGHT)  &kp LSHFT  &trans
                        >;
                };
        };
};
