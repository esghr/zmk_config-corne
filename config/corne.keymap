/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Aliases
#define PLUS	KC_RIGHT_BRACKET // 
#define DE_CIRC GRAVE  // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT PLUS  // ´ (dead)
#define DE_UE 	LBKT // Ü
#define DE_PLUS RBRC // +
#define DE_OE 	SEMI // Ö
#define DE_AE 	SQT // Ä
#define DE_HASH NUHS // #
#define DE_LABK NUBS // <
#define DE_MINS SLASH // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(N1)    // !
#define DE_DQUO LS(N2)    // "
#define DE_SECT LS(N3)    // §
#define DE_DLR  LS(N4)    // $
#define DE_PERC LS(N5)    // %
#define DE_AMPR LS(N6)    // &
#define DE_SLSH LS(N7)    // /
#define DE_LPRN LS(N8)    // (
#define DE_RPRN LS(N9)    // )
#define DE_EQL  LS(N0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(RBRC) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(COMMA) // ;
#define DE_COLN LS(DOT)  // :
#define DE_UNDS LS(DE_MINS) // _
#define DE_SUP2 RA(N2)    // ²
#define DE_SUP3 RA(N3)    // ³
#define DE_LCBR RA(N7)    // {
#define DE_LBRC RA(N8)    // [
#define DE_RBRC RA(N9)    // ]
#define DE_RCBR RA(N0)    // }
#define DE_BSLS RA(DE_SS)   // (backslash)
#define DE_AT   RA(Q)    // @
#define DE_EURO RA(E)    // €
#define DE_TILD RA(DE_PLUS) // ~
#define DE_PIPE RA(DE_LABK) // |
#define DE_MICR RA(M)    // µ


//Tastenkombi: E, BCKSPC
//Ausgabe: del_word
/ {
    combos {
        compatible = "zmk,combos";
        combo_delword {
            timeout-ms = <40>;
            key-positions = <16 41>;
            bindings = <&kp LC(BSPC)>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    
    behaviors {
        hml: homerow_mods_layers {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &hm LCTRL A &hm LGUI S &hm LALT D &hm LSHIFT F
            >;
        };
    };
};




/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC  |     Z     |  J (TAB)  |     U     |     A    |    Q    |     |    P    |    B     |    M    |    L    |    F    |       |
// |   ß   |  C (LGUI) |     S     |  I (RALT) | E (LCTRL)|    O    |     |    D    | T (RCTRL)| N (RALT)|    R    |H (LGUS) |   Y   |
// |   !   |     V     |     X     |     Ü     |     Ä    |    Ö    |     |    W    |    G     |    ,    |    .    |    K    |   ?   |
//                                 |    RET    |    LWR   |   SPC   |     |   SHFT  |   RSL    |  BSPC   |

                        bindings = <
   &kp ESC    &kp Z      &hm TAB J &kp U      &kp A       &kp Q              &kp P     &kp B       &kp M      &kp L    &kp F      &trans
   &kp Y      &hm LGUI C &kp S     &hm RALT I &hm LCTRL E &kp O              &kp D     &hm RCTRL T &hm RALT N &kp R    &hm LGUI H &kp MINUS 
   &kp LS(N1) &kp V      &kp X     &kp LBKT   &kp SQT     &kp SEMI           &kp W     &kp G       &kp COMMA  &kp DOT  &kp K      &kp LS(MINUS)
                                   &kp RET    &mo 1       &kp SPACE          &kp LSHFT &mo 2      &kp BSPC
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |LFTline  |DWNpage    |  UPpage  |RGTline  |   |     |   | 7 | 8 | 9 | mu |    |
// |HOME |LFT(word)| DWN       |    UP    |RGT(word)|END|     |   | 4 | 5 | 6 |    |    |
// |     |LC(END)  |LC(LA(DWN))|LC(LA(UP))|LC(HOME) |   |     |   | 1 | 2 | 3 |    |    |
//                             |  *       |  =      |   |     |   | 0 |   |
                        bindings = <
   &trans &hm LC(HOME) HOME               &kp PG_DN        &kp PG_UP     &hm LC(END) END   &hm DE_RBRC DE_LBRC  &hm LS(SLASH) SLASH &kp N7 &kp N8 &kp N9 &kp RA(M)  &trans  
   &trans &hm LC(C_MENU_LEFT) C_MENU_LEFT &kp C_MENU_DOWN &kp C_MENU_UP &hm LC(C_MENU_RIGHT) C_MENU_RIGHT &kp END &trans &hm LSHFT N4  &kp N5 &kp N6 &kp RA(Q) &trans 
   &trans &kp LC(END)               &kp LC(LA(C_MENU_DOWN))   &kp LC(LA(C_MENU_UP))  &kp LC(HOME) &trans &kp SLASH &kp N1 &kp N2 &kp N3 &trans &trans 
                                           &trans &kp LS(N0) &trans     &trans &kp N0 &trans 
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  xi | F1| F2 | F3 | F4 | F5 |  | F6 | F7 | F8 | F9 | F10|omega |
// |  \  | / | - | ' | " |    |   | F12 |    |||    |    |
// |theta| = | _ |"|"|  pi |zeta |   |  #  |  %  |"|"(°)|DLR (EURO)| <  |  | 
//                    |     |    |line lft|   |line lft|LSHFT|    |
                        bindings = <
   &kp F1        &kp F2     &kp F3        &kp F4       &kp F5     &kp F6       &kp F7     &kp F8      &kp F9          &kp F10    &kp F11    &kp F12
   &kp RA(MINUS) &kp LS(N7) &kp SLASH     &kp LS(NUHS) &kp LS(N2) &trans       &kp RA(N7) &kp DE_RBRC &kp LS(N8)      &kp LS(N8) &kp LS(N9) &kp RA(N0)
   &trans        &kp NUBS   &kp LS(SLASH) &kp LS(N4)   &kp RBRC   &trans       &kp NUHS   &kp LS(N5)  &kp LS(DE_CIRC) &kp RA(E)  &kp NUBS   &kp LS(NUBS)
                                  &trans       &trans     &trans       &trans     &trans      &trans
                        >;
                };
        };
};
