/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Aliases 
#define DE_CIRC GRAVE  // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT PLUS  // ´ (dead)
#define DE_UE 	LBKT // Ü
#define DE_PLUS RBRC // +
#define DE_OE 	SEMI // Ö
#define DE_AE 	SQT // Ä
#define DE_HASH NUHS // #
#define DE_LABK NUBS // <
#define DE_MINS SLASH // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(N1)    // !
#define DE_DQUO LS(N2)    // "
#define DE_SECT LS(N3)    // §
#define DE_DLR  LS(N4)    // $
#define DE_PERC LS(N5)    // %
#define DE_AMPR LS(N6)    // &
#define DE_SLSH LS(N7)    // /
#define DE_LPRN LS(N8)    // (
#define DE_RPRN LS(N9)    // )
#define DE_EQL  LS(N0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(RBRC) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(COMMA) // ;
#define DE_COLN LS(DOT)  // :
#define DE_UNDS LS(DE_MINS) // _
#define DE_SUP2 RA(N2)    // ²
#define DE_SUP3 RA(N3)    // ³
#define DE_LCBR RA(N7)    // {
#define DE_LBRC RA(N8)    // [
#define DE_RBRC RA(N9)    // ]
#define DE_RCBR RA(N0)    // }
#define DE_BSLS RA(DE_SS)   // (backslash)
#define DE_AT   RA(Q)    // @
#define DE_EURO RA(E)    // €
#define DE_TILD RA(DE_PLUS) // ~
#define DE_PIPE RA(DE_LABK) // |
#define DE_MICR RA(M)    // µ

// SHFT: ()
// ALT: []
// Taste gedrückt halten: {}

// zum Anfang der Zeile springen: lL (lineLeft)
// zum Ende der Zeile springen: lR (lineRight)
// vor ein Wort springen: lW (left(of)Word)
// hinter ein Wort springen: rW (right(of)Word)
// zum Anfang der Seite springen: pU (pageUp)
// zum Ende der Seite springen: pD (pageDown)
// Idee: Hold SPC ist auf Layer 1
/ {
        behaviors {
        mo_tog: mo_tog_tabdance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mo 1>, <&mo 2>, <&mo 3>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |ESC TAB|  Y  |  J   |  U  |  A  |  Q  |   |  P  |  B  |  M  |  L  |  F  | BSPC|
// |   Z   |  C  |  S   |  I  |  E  |  O  |   |  D  |  T  |  N  |  R  |  H  |  ß  |
// |  LGUI |  V  |  X   |  Ü  |  Ä  |  Ö  |   |  W  |  G  |  ,  |  .  |  K  |  -  |
//              |BSPC LCTRL|TAB RALT| SPC |   |SHFT |tog1 | RET RALT |

                        bindings = <
   &mt TAB ESC &kp Z &kp J &kp U    &kp A   &kp Q       &kp P     &kp B &kp M      &kp L    &kp F &kp BSPC
   &kp Y       &kp C &kp S &kp I    &kp E   &kp O       &kp D     &kp T &kp N      &kp R    &kp H &kp MINUS 
   &kp LGUI    &kp V &kp X &kp LBKT &kp SQT &kp SEMI    &kp W     &kp G &kp COMMA  &kp DOT  &kp K &kp SLASH
                &mt LCTRL BSPC &mt RALT TAB &kp SPACE   &kp LSHFT &mo_tog &mt TAB RET
                        >;
                };
                num_F_nav_layer {
// -----------------------------------------------------------------------------------------
// | ESC TAB |  N6   | N7 |  N8  |  N9  |  N0 |   |  F6  | F7  |  F8  |  F9  | F10 | PG_UP |
// |  F11    |  N1   | N2 |  N3  |  N4  |  N5 |   | HOME | LFT |  UP  |  DWN |RIGHT|  END  |
// |  LGUI   | GRAVE |NUHS| NUBS | RBKT | RBRC|   |  F1  | F2  |  F3  |  F4  | F5  | PG_DN |
//                        |RET LCTRL| F12 |SPC|   | SHFT |tog1  |TAB RALT |
                        bindings = <
   &mt TAB ESC &kp N6    &kp N7   &kp N8   &kp N9     &kp N0      &kp F6   &kp F7   &kp F8   &kp F9   &kp F10   &kp PG_UP 
   &kp F11     &kp N1    &kp N2   &kp N3   &kp N4     &kp N5      &kp HOME &kp LEFT &kp UP   &kp DOWN &kp RIGHT &kp END 
   &kp LGUI    &kp GRAVE &kp NUHS &kp NUBS &kp RBKT   &kp RBRC    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5    &kp PG_DN
                         &mt LCTRL BSPC    &kp F12    &kp SPACE   &kp LSHFT  &mo_tog 1 &mt RALT RET
                        >;
                };
                 LS_num_F_nav_layer {
// -----------------------------------------------------------------------------------------
// | ESC TAB |  LS(N6)   | LS(N7) |  LS(N8)  |  LS(N9)  |  LS(N0) |   |      |     |      |      |     | PG_UP |
// |         |  LS(N1)   | LS(N2) |  LS(N3)  |  LS(N4)  |  LS(N5) |   | HOME | LFT |  UP  |  DWN |RIGHT|  END  |
// |  LGUI   | LS(GRAVE) |LS(NUHS)| LS(NUBS) | LS(RBKT) | LS(RBRC)|   |      |     |      |      |     | PG_DN |
//                        |RET LCTRL| F12 |SPC|   | SHFT |tog1  |TAB RALT |
                        bindings = <
   &mt TAB ESC &kp LS(N6)    &kp LS(N7)   &kp LS(N8)   &kp LS(N9)   &kp LS(N0)   &trans    &trans   &trans &trans   &trans    &kp PG_UP 
   &trans      &kp LS(N1)    &kp LS(N2)   &kp LS(N3)   &kp LS(N4)   &kp LS(N5)   &kp HOME  &kp LEFT &kp UP &kp DOWN &kp RIGHT &kp END 
   &kp LGUI    &kp LS(GRAVE) &kp LS(NUHS) &kp LS(NUBS) &kp LS(RBKT) &kp LS(RBRC) &trans    &trans   &trans &trans   &trans    &kp PG_DN
                           &mt LCTRL BSPC &trans       &kp SPACE    &kp LSHFT    &mo_tog 1 &mt RALT RET
                        >;
                };
                 RALT_num_F_nav_layer {
// -----------------------------------------------------------------------------------------
// | ESC TAB |  RA(N6)   | RA(N7) |  RA(N8)  |  RA(N9)  |  RA(N0) |   |      |     |      |      |     | PG_UP |
// |         |  RA(N1)   | RA(N2) |  RA(N3)  |  RA(N4)  |  RA(N5) |   | HOME | LFT |  UP  |  DWN |RIGHT|  END  |
// |  LGUI   | RA(GRAVE) |RA(NUHS)| RA(NUBS) | RA(RBKT) | RA(RBRC)|   |      |     |      |      |     | PG_DN |
//                                            |RET LCTRL|     |SPC|   | SHFT |tog1  |TAB RALT |
                        bindings = <
   &mt TAB ESC &kp RA(N6)    &kp RA(N7)   &kp RA(N8)   &kp RA(N9)     &kp RA(N0)      &trans   &trans &trans &trans   &trans   &kp PG_UP 
   &trans      &kp RA(N1)    &kp RA(N2)   &kp RA(N3)   &kp RA(N4)     &kp RA(N5)      &kp HOME &kp LEFT &kp UP   &kp DOWN &kp RIGHT &kp END 
   &kp LGUI    &kp RA(GRAVE) &kp RA(NUHS) &kp RA(NUBS) &kp RA(RBKT)   &kp RA(RBRC)    &trans    &trans   &trans   &trans   &trans    &kp PG_DN
                         &mt LCTRL BSPC    &trans   &kp SPACE   &kp LSHFT  &mo_tog 1 &mt RALT RET
                        >;
                };
        };
};
